21.05.2017 23:42:07: Lt. SGoldie (178.251.182.24:2304) 98e38832eb88a9c615080d7b5b1b05b8 - Compile Block "Achilles_fnc_damageBuildings" = ype = param [1,0,[0]];
_distribution_type = param [2,0,[0]];

_fnc_getDamageType = switch (_distribution_type) do
{
case 0: {compile (str _mean_damage_type)};
case 1: {{round (random 3)}};
case 2: {compile ("round (random [0," + (str _mean_damage_type) + ",3])")};
};

{
_building = _x;
_damage_type = [] call _fnc_getDamageType;
switch (_damage_type) do
{
case 0: {_building setDamage 0};
case 1: {_building setDamage 0.8};
case 2:
{
_building setDamage 0.5;
_allHitPoints = getAllHitPointsDamage _building;
if (count _allHitPoints > 0) then
{
_hitzones = [];
_other = [];
{
_index  = _x find "Hitzone";
if (_index == -1) then {_other pushBack _forEachIndex} else {_hitzones pushBack _forEachIndex};
} forEach (_allHitPoints select 0);

if (count _other > 0) then
{
{
_building setHitIndex [_x,1];
} forEach _other;
};
_counter = count _hitzones;
if (_counter > 0) then
{
_extend_count = ceil ((random 1) * _counter);
for "_i" from 1 to _extend_count do
{
_hitzone = selectRandom _hitzones;
_building setHitIndex [_hitzone,1];
_hitzones = _hitzones - [_hitzone];
};
};
};
};
case 3: {_building setDamage 1};
}; 	
} forEach _buildings;}
21.05.2017 23:43:30: Cpl. John H Smith (84.213.75.83:2304) 0a3a4144bb9583855824d12bc6b4ba56 - Compile Block "Achilles_fnc_damageBuildings" = ype = param [1,0,[0]];
_distribution_type = param [2,0,[0]];

_fnc_getDamageType = switch (_distribution_type) do
{
case 0: {compile (str _mean_damage_type)};
case 1: {{round (random 3)}};
case 2: {compile ("round (random [0," + (str _mean_damage_type) + ",3])")};
};

{
_building = _x;
_damage_type = [] call _fnc_getDamageType;
switch (_damage_type) do
{
case 0: {_building setDamage 0};
case 1: {_building setDamage 0.8};
case 2:
{
_building setDamage 0.5;
_allHitPoints = getAllHitPointsDamage _building;
if (count _allHitPoints > 0) then
{
_hitzones = [];
_other = [];
{
_index  = _x find "Hitzone";
if (_index == -1) then {_other pushBack _forEachIndex} else {_hitzones pushBack _forEachIndex};
} forEach (_allHitPoints select 0);

if (count _other > 0) then
{
{
_building setHitIndex [_x,1];
} forEach _other;
};
_counter = count _hitzones;
if (_counter > 0) then
{
_extend_count = ceil ((random 1) * _counter);
for "_i" from 1 to _extend_count do
{
_hitzone = selectRandom _hitzones;
_building setHitIndex [_hitzone,1];
_hitzones = _hitzones - [_hitzone];
};
};
};
};
case 3: {_building setDamage 1};
}; 	
} forEach _buildings;}
